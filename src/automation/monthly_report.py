"""
Automatizaci√≥n mensual para an√°lisis de inversi√≥n y env√≠o por email
Se ejecuta el primer d√≠a h√°bil de cada mes
"""

import os
import sys
import smtplib
import json
from datetime import datetime, timedelta
from pathlib import Path
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import pandas as pd

# Agregar src al path
src_path = Path(__file__).parent.parent
sys.path.append(str(src_path))

from analysis.investment_analyzer import InvestmentAnalyzer
from analysis.report_generator import generate_investment_report
from utils.config import get_config


def is_first_business_day():
    """Verifica si hoy es el primer d√≠a h√°bil del mes"""
    today = datetime.now()
    
    # Obtener primer d√≠a del mes
    first_day = datetime(today.year, today.month, 1)
    
    # Buscar primer d√≠a h√°bil (lunes=0, domingo=6)
    while first_day.weekday() > 4:  # Si es s√°bado (5) o domingo (6)
        first_day += timedelta(days=1)
    
    return today.date() == first_day.date()


def run_monthly_analysis():
    """Ejecuta an√°lisis mensual completo"""
    print(f"üöÄ Iniciando an√°lisis mensual - {datetime.now()}")
    
    try:
        # Configuraci√≥n predeterminada
        config = {
            'budget': 200000,  # 200 mil CLP
            'risk_level': 'moderado',
            'dividend_preference': True
        }
        
        # Ejecutar an√°lisis
        analyzer = InvestmentAnalyzer()
        result = analyzer.run_complete_analysis_with_gpt(
            budget=config['budget'],
            risk_level=config['risk_level'],
            dividend_preference=config['dividend_preference']
        )
        
        print(f"‚úÖ An√°lisis completado. Empresas analizadas: {result['market_summary']['total_empresas']}")
        print(f"üìä Recomendaciones generadas: {result['recommendations']['empresas_recomendadas']}")
        
        return result, config
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis: {str(e)}")
        raise


def generate_monthly_report(result, config):
    """Genera reporte mensual completo"""
    print("üìÑ Generando reporte mensual...")
    
    try:
        # Generar reporte con gr√°ficos
        report = generate_investment_report(
            result['fundamental_data'],
            result['recommendations'],
            result['market_summary']
        )
        
        # Crear reporte en texto
        report_content = f"""
        REPORTE MENSUAL DE INVERSI√ìN - {datetime.now().strftime('%B %Y').upper()}
        ================================================================

        üìä RESUMEN EJECUTIVO
        - Fecha del an√°lisis: {datetime.now().strftime('%d/%m/%Y')}
        - Presupuesto analizado: ${config['budget']:,} CLP
        - Perfil de riesgo: {config['risk_level'].title()}
        - Total de empresas analizadas: {result['market_summary']['total_empresas']}
        - Empresas recomendadas: {result['recommendations']['empresas_recomendadas']}

        ü§ñ AN√ÅLISIS INTELIGENTE CON IA
        {'=' * 40}
        """
        
        # Incluir an√°lisis GPT si est√° disponible
        if 'gpt_analysis' in result and result['gpt_analysis']:
            report_content += f"""
            ‚úÖ AN√ÅLISIS REALIZADO CON INTELIGENCIA ARTIFICIAL

            {result['gpt_analysis']}

            ÔøΩ DISTRIBUCI√ìN RECOMENDADA POR IA:
            {result['gpt_distribution']}

            """
        else:
            report_content += """
            ‚ö†Ô∏è AN√ÅLISIS IA NO DISPONIBLE
            - Para habilitar an√°lisis con IA, configure OPENAI_API_KEY
            - Se utiliz√≥ an√°lisis autom√°tico basado en m√©tricas cuantitativas
            """
        
        report_content += f"""
        ÔøΩüí∞ TOP 10 RECOMENDACIONES DE INVERSI√ìN (AN√ÅLISIS AUTOM√ÅTICO):
        """
        
        # Top 10 recomendaciones
        for i, company in enumerate(result['recommendations']['distribucion'][:10], 1):
            report_content += f"""
            {i:2d}. {company['Empresa']} ({company['Ticker']})
                ‚Ä¢ Sector: {company['Sector']}
                ‚Ä¢ Inversi√≥n sugerida: ${company['Monto_Inversion']:,} CLP ({company['Porcentaje_Recomendado']:.2f}%)
                ‚Ä¢ Score de an√°lisis: {company['Puntaje']:.4f}
            """
        
        # Distribuci√≥n por sectores
        report_content += f"""
        üè¢ DISTRIBUCI√ìN POR SECTORES:
        """
        for sector, data in result['recommendations']['resumen_sectores'].items():
            report_content += f"‚Ä¢ {sector}: ${data['Monto_Inversion']:,} CLP ({data['Porcentaje_Recomendado']:.1f}%)\n"
        
        # M√©tricas del mercado
        report_content += f"""
        üìà ESTADO DEL MERCADO CHILENO:
        ‚Ä¢ Precio promedio de acciones: ${result['market_summary']['precio_promedio']:.2f}
        ‚Ä¢ Variaci√≥n promedio √∫ltimos 6 meses: {result['market_summary']['variacion_promedio_6m']:.2f}%
        ‚Ä¢ Dividend yield promedio: {result['market_summary']['dividend_yield_promedio']:.2f}%
        ‚Ä¢ Empresas con dividendos: {result['market_summary']['empresas_con_dividendos']}

        üèÜ MEJORES PERFORMERS (6 meses):
        """
        
        for i, performer in enumerate(result['market_summary']['top_performers_6m'][:5], 1):
            report_content += f"{i}. {performer['Empresa']}: {performer['Variacion_6M']*100:.1f}%\n"
        
        report_content += f"""
        üíé MEJORES DIVIDENDOS:
        """
        
        for i, dividend in enumerate(result['market_summary']['mejores_dividendos'][:5], 1):
            report_content += f"{i}. {dividend['Empresa']}: {dividend['Dividend_Yield']*100:.2f}%\n"
        
        # Disclaimer
        report_content += f"""
        ‚ö†Ô∏è  IMPORTANTE - DISCLAIMER:
        Este an√°lisis es generado autom√°ticamente con fines informativos √∫nicamente.
        No constituye asesor√≠a financiera profesional. Los datos se basan en informaci√≥n
        hist√≥rica y pueden no reflejar condiciones futuras del mercado. Se recomienda
        consultar con un asesor financiero antes de tomar decisiones de inversi√≥n.

        ---
        Reporte generado autom√°ticamente el {datetime.now().strftime('%d/%m/%Y a las %H:%M')}
        Sistema de An√°lisis Automatizado - Stock Investment Advisor
        """
        
        # Guardar reporte
        report_filename = f"reporte_mensual_{datetime.now().strftime('%Y_%m')}.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"‚úÖ Reporte guardado: {report_filename}")
        
        return report_content, report_filename
        
    except Exception as e:
        print(f"‚ùå Error generando reporte: {str(e)}")
        raise


def send_email_report(report_content, report_filename):
    """Env√≠a reporte por email"""
    print("üìß Preparando env√≠o de email...")
    
    try:
        # Configuraci√≥n de email (variables de entorno)
        smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        smtp_port = int(os.getenv('SMTP_PORT', '587'))
        sender_email = os.getenv('SENDER_EMAIL')
        sender_password = os.getenv('SENDER_PASSWORD')
        recipient_email = os.getenv('RECIPIENT_EMAIL')
        
        # Verificar configuraci√≥n
        if not all([sender_email, sender_password, recipient_email]):
            print("‚ö†Ô∏è  Configuraci√≥n de email incompleta. Saltando env√≠o...")
            print("   Configure las variables de entorno:")
            print("   - SENDER_EMAIL: Email del remitente")
            print("   - SENDER_PASSWORD: Contrase√±a del remitente")
            print("   - RECIPIENT_EMAIL: Email del destinatario")
            return False
        
        # Crear mensaje
        message = MIMEMultipart()
        message['From'] = sender_email
        message['To'] = recipient_email
        message['Subject'] = f"üìä Reporte Mensual de Inversi√≥n - {datetime.now().strftime('%B %Y')}"
        
        # Cuerpo del email
        body = f"""
        Estimado/a inversionista,

        Se ha generado el reporte mensual de an√°lisis de inversi√≥n para el mercado chileno.

        üìÖ Fecha: {datetime.now().strftime('%d de %B de %Y')}
        üéØ An√°lisis: Mercado de acciones chileno
        üí∞ Presupuesto base: $5.000.000 CLP

        Encuentra el reporte completo en el archivo adjunto.

        Highlights del mes:
        ‚Ä¢ Total de empresas analizadas en el mercado chileno
        ‚Ä¢ Recomendaciones de inversi√≥n basadas en an√°lisis fundamental
        ‚Ä¢ Distribuci√≥n sugerida por sectores
        ‚Ä¢ M√©tricas clave del mercado

        ‚ö†Ô∏è Recordatorio: Este an√°lisis es generado autom√°ticamente y tiene fines informativos √∫nicamente.

        Saludos,
        Sistema Automatizado de An√°lisis de Inversi√≥n
        """
        
        message.attach(MIMEText(body, 'plain'))
        
        # Adjuntar archivo de reporte
        try:
            with open(report_filename, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename= {report_filename}'
            )
            message.attach(part)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  Archivo de reporte no encontrado: {report_filename}")
        
        # Enviar email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        text = message.as_string()
        server.sendmail(sender_email, recipient_email, text)
        server.quit()
        
        print(f"‚úÖ Email enviado exitosamente a {recipient_email}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error enviando email: {str(e)}")
        return False


def cleanup_files(report_filename):
    """Limpia archivos temporales"""
    try:
        if os.path.exists(report_filename):
            os.remove(report_filename)
            print(f"üóëÔ∏è  Archivo temporal eliminado: {report_filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error limpiando archivos: {str(e)}")


def main():
    """Funci√≥n principal del script de automatizaci√≥n"""
    print("=" * 60)
    print("ü§ñ SISTEMA DE AN√ÅLISIS AUTOMATIZADO")
    print("=" * 60)
    
    # Verificar si es el primer d√≠a h√°bil del mes
    if not is_first_business_day():
        print(f"üìÖ Hoy no es el primer d√≠a h√°bil del mes. Saliendo...")
        print(f"   Fecha actual: {datetime.now().strftime('%d/%m/%Y - %A')}")
        return
    
    print(f"üéØ Es primer d√≠a h√°bil del mes. Ejecutando an√°lisis...")
    
    try:
        # 1. Ejecutar an√°lisis
        result, config = run_monthly_analysis()
        
        # 2. Generar reporte
        report_content, report_filename = generate_monthly_report(result, config)
        
        # 3. Enviar por email
        email_sent = send_email_report(report_content, report_filename)
        
        # 4. Limpiar archivos
        cleanup_files(report_filename)
        
        # 5. Resumen final
        print("\n" + "=" * 60)
        print("‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
        print("=" * 60)
        print(f"üìä Empresas analizadas: {result['market_summary']['total_empresas']}")
        print(f"üéØ Recomendaciones: {result['recommendations']['empresas_recomendadas']}")
        print(f"üìß Email enviado: {'S√≠' if email_sent else 'No'}")
        print(f"‚è∞ Tiempo: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO EN EL PROCESO:")
        print(f"   {str(e)}")
        print("\nDetalles para debugging:")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
