#!/usr/bin/env python3
"""
Script para probar el sistema de cach√© completo en todas las funcionalidades
"""

import sys
import time
from pathlib import Path

# Agregar el directorio src al path
src_path = Path(__file__).parent / "src"
sys.path.append(str(src_path))

from data_sources.yahoo_finance import YahooFinanceDataExtractor


def test_cache_performance():
    """Prueba el rendimiento del sistema de cach√© completo"""
    print("üß™ PRUEBA DEL SISTEMA DE CACH√â COMPLETO")
    print("=" * 60)
    
    extractor = YahooFinanceDataExtractor()
    
    # Informaci√≥n inicial del cach√©
    print("\nüìã Estado inicial del cach√©:")
    cache_info = extractor.get_cache_info()
    print(f"  üìÅ Archivos: {cache_info.get('total_files', 0)}")
    print(f"  üíΩ Tama√±o: {cache_info.get('total_size_mb', 0):.1f} MB")
    
    # Lista de funciones a probar
    test_functions = [
        ("Precios Actuales", lambda: extractor.get_current_prices()),
        ("Resumen del Mercado", lambda: extractor.get_market_summary()),
        ("Rendimiento Sectorial", lambda: extractor.get_sector_performance()),
        ("Datos Hist√≥ricos M√∫ltiples", 
         lambda: extractor.get_multiple_historical_data(period="3mo")),
    ]
    
    results = {}
    
    # Primera ejecuci√≥n (descarga datos)
    print("\nüîÑ PRIMERA EJECUCI√ìN (descarga datos):")
    print("-" * 40)
    
    for name, func in test_functions:
        print(f"üì° Ejecutando {name}...")
        start_time = time.time()
        
        try:
            result = func()
            execution_time = time.time() - start_time
            
            # Determinar el tama√±o/cantidad de datos
            if hasattr(result, 'shape'):
                data_info = f"{result.shape[0]} filas"
            elif isinstance(result, dict):
                if 'total_stocks' in result:
                    data_info = f"{result['total_stocks']} acciones"
                elif len(result) > 0 and hasattr(list(result.values())[0], 'shape'):
                    data_info = f"{len(result)} series hist√≥ricas"
                else:
                    data_info = f"{len(result)} elementos"
            else:
                data_info = "datos obtenidos"
            
            results[name] = {
                'first_run': execution_time,
                'data_info': data_info,
                'success': True
            }
            
            print(f"  ‚úÖ {name}: {execution_time:.2f}s ({data_info})")
            
        except Exception as e:
            print(f"  ‚ùå {name}: Error - {e}")
            results[name] = {'first_run': 0, 'success': False, 'error': str(e)}
    
    # Pausa breve
    time.sleep(1)
    
    # Segunda ejecuci√≥n (desde cach√©)
    print("\n‚ö° SEGUNDA EJECUCI√ìN (desde cach√©):")
    print("-" * 40)
    
    for name, func in test_functions:
        if not results[name]['success']:
            continue
            
        print(f"üíæ Ejecutando {name}...")
        start_time = time.time()
        
        try:
            result = func()
            execution_time = time.time() - start_time
            results[name]['second_run'] = execution_time
            
            print(f"  ‚úÖ {name}: {execution_time:.3f}s (desde cach√©)")
            
        except Exception as e:
            print(f"  ‚ùå {name}: Error en cach√© - {e}")
            results[name]['cache_error'] = str(e)
    
    # An√°lisis de resultados
    print("\nüìä AN√ÅLISIS DE RENDIMIENTO:")
    print("=" * 60)
    
    total_improvement = 0
    successful_tests = 0
    
    for name, data in results.items():
        if not data['success']:
            print(f"‚ùå {name}: Fall√≥ - {data.get('error', 'Error desconocido')}")
            continue
        
        first_time = data['first_run']
        second_time = data.get('second_run', first_time)
        
        if second_time < first_time:
            improvement = ((first_time - second_time) / first_time) * 100
            total_improvement += improvement
            successful_tests += 1
            
            print(f"‚ö° {name}:")
            print(f"   üïê Primera vez: {first_time:.2f}s")
            print(f"   ‚ö° Con cach√©: {second_time:.3f}s")
            print(f"   üìà Mejora: {improvement:.1f}%")
            print(f"   üìä Datos: {data['data_info']}")
        else:
            print(f"‚ö†Ô∏è  {name}: Sin mejora significativa")
        
        print()
    
    # Resumen final
    if successful_tests > 0:
        avg_improvement = total_improvement / successful_tests
        print(f"üéØ RESUMEN FINAL:")
        print(f"   ‚úÖ Pruebas exitosas: {successful_tests}/{len(test_functions)}")
        print(f"   üìà Mejora promedio: {avg_improvement:.1f}%")
        
        # Estado final del cach√©
        final_cache_info = extractor.get_cache_info()
        print(f"   üìÅ Archivos de cach√©: {final_cache_info.get('total_files', 0)}")
        print(f"   üíΩ Tama√±o total: {final_cache_info.get('total_size_mb', 0):.1f} MB")
        
        if avg_improvement > 30:
            print("üèÜ ¬°Sistema de cach√© funcionando EXCELENTEMENTE!")
        elif avg_improvement > 10:
            print("üëç Sistema de cach√© funcionando correctamente")
        else:
            print("‚ö†Ô∏è  Sistema de cach√© con mejoras menores")
    else:
        print("‚ùå No se pudieron completar las pruebas exitosamente")
    
    print("\n" + "=" * 60)


if __name__ == "__main__":
    test_cache_performance()
